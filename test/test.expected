(table.get $table
 (i32.const 0)
)
(table.size $table)
(table.grow $table
 (ref.null nofunc)
 (i32.const 0)
)
(module
 (type $0 (func (param i32 i32) (result i32)))
 (type $1 (func))
 (type $2 (func (param anyref i32 i32) (result i32)))
 (type $3 (func (param anyref) (result i32)))
 (import "future-wasi" "write" (func $write (type $2) (param anyref i32 i32) (result i32)))
 (global $max_int64 i64 (i64.const 9223372036854775807))
 (global $max_int64_mut (mut i64) (i64.const 9223372036854775807))
 (global $test_float64_bits f64 (f64.const 1.23))
 (memory $0 1)
 (data $0 (i32.const 0) "hello")
 (data $1 "world")
 (table $table 1 1 funcref)
 (elem $elem (i32.const 0) $adder)
 (export "adder" (func $adder))
 (export "memory" (memory $0))
 (export "hello" (func $hello))
 (start $start)
 (func $adder (type $0) (param $0 i32) (param $1 i32) (result i32)
  (block $add (result i32)
   (block $simd
    (drop
     (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)
    )
    (drop
     (v128.const i32x4 0x12345678 0x87654321 0xdeadbeef 0xdeadbeef)
    )
    (drop
     (i64x2.extract_lane 0
      (v128.const i32x4 0x12345678 0x87654321 0xdeadbeef 0xdeadbeef)
     )
    )
    (drop
     (i8x16.replace_lane 7
      (v128.const i32x4 0x12345678 0x87654321 0xdeadbeef 0xdeadbeef)
      (local.get $0)
     )
    )
    (drop
     (i8x16.shuffle 0 16 1 17 2 18 3 19 4 20 5 21 6 22 7 23
      (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)
      (v128.const i32x4 0x12345678 0x87654321 0xdeadbeef 0xdeadbeef)
     )
    )
    (drop
     (v128.any_true
      (v128.const i32x4 0x12345678 0x87654321 0xdeadbeef 0xdeadbeef)
     )
    )
    (drop
     (v128.and
      (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)
      (v128.const i32x4 0x12345678 0x87654321 0xdeadbeef 0xdeadbeef)
     )
    )
    (drop
     (v128.bitselect
      (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)
      (v128.const i32x4 0x12345678 0x87654321 0xdeadbeef 0xdeadbeef)
      (v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001)
     )
    )
    (drop
     (i16x8.shl
      (v128.const i32x4 0x12345678 0x87654321 0xdeadbeef 0xdeadbeef)
      (local.get $0)
     )
    )
    (drop
     (v128.load64_splat offset=4
      (local.get $0)
     )
    )
    (drop
     (v128.load32_lane offset=4 3
      (local.get $0)
      (v128.const i32x4 0x12345678 0x87654321 0xdeadbeef 0xdeadbeef)
     )
    )
    (v128.store64_lane offset=4 1
     (local.get $0)
     (v128.const i32x4 0x12345678 0x87654321 0xdeadbeef 0xdeadbeef)
    )
   )
   (if
    (i32.const 0)
    (unreachable)
   )
   (i32.add
    (select
     (local.get $0)
     (i32.load
      (local.get $1)
     )
     (i32.const 1)
    )
    (local.get $1)
   )
  )
 )
 (func $start (type $1)
  (block $start
   (memory.init $1
    (i32.const 2048)
    (i32.const 0)
    (i32.const 5)
   )
   (drop
    (call_indirect $table (type $0)
     (i32.const 3)
     (i32.const 5)
     (i32.const 0)
    )
   )
  )
 )
 (func $hello (type $3) (param $0 anyref) (result i32)
  (call $write
   (local.get $0)
   (i32.const 0)
   (i32.const 1)
  )
 )
)
(module
 (type $0 (func (param i32 i32) (result i32)))
 (type $1 (func))
 (type $2 (func (param anyref i32 i32) (result i32)))
 (type $3 (func (param anyref) (result i32)))
 (import "future-wasi" "write" (func $write (type $2) (param anyref i32 i32) (result i32)))
 (memory $0 1)
 (data $0 (i32.const 0) "hello")
 (data $1 "world")
 (table $table 1 1 funcref)
 (elem $elem (i32.const 0) $adder)
 (export "adder" (func $adder))
 (export "memory" (memory $0))
 (export "hello" (func $hello))
 (start $start)
 (func $adder (type $0) (; has Stack IR ;) (param $0 i32) (param $1 i32) (result i32)
  (drop
   (v128.load64_splat offset=4
    (local.get $0)
   )
  )
  (drop
   (v128.load32_lane offset=4 3
    (local.get $0)
    (v128.const i32x4 0x12345678 0x87654321 0xdeadbeef 0xdeadbeef)
   )
  )
  (v128.store64_lane offset=4 1
   (local.get $0)
   (v128.const i32x4 0x12345678 0x87654321 0xdeadbeef 0xdeadbeef)
  )
  (i32.add
   (select
    (local.get $0)
    (i32.load
     (local.get $1)
    )
    (i32.const 1)
   )
   (local.get $1)
  )
 )
 (func $start (type $1) (; has Stack IR ;)
  (memory.init $1
   (i32.const 2048)
   (i32.const 0)
   (i32.const 5)
  )
  (drop
   (call $adder
    (i32.const 3)
    (i32.const 5)
   )
  )
 )
 (func $hello (type $3) (; has Stack IR ;) (param $0 anyref) (result i32)
  (call $write
   (local.get $0)
   (i32.const 0)
   (i32.const 1)
  )
 )
)
(module
 (type $type$0 (func (param anyref i32 i32) (result i32)))
 (type $type$1 (func (param i32 i32) (result i32)))
 (type $type$2 (func))
 (type $type$3 (func (param anyref) (result i32)))
 (import "future-wasi" "write" (func $fimport$0 (type $type$0) (param anyref i32 i32) (result i32)))
 (memory $0 1)
 (data $0 (i32.const 0) "hello")
 (data $1 "world")
 (table $0 1 1 funcref)
 (elem $0 (i32.const 0) $0)
 (export "adder" (func $0))
 (export "memory" (memory $0))
 (export "hello" (func $2))
 (start $1)
 (func $0 (type $type$1) (param $0 i32) (param $1 i32) (result i32)
  (drop
   (v128.load64_splat offset=4
    (local.get $0)
   )
  )
  (drop
   (v128.load32_lane offset=4 3
    (local.get $0)
    (v128.const i32x4 0x12345678 0x87654321 0xdeadbeef 0xdeadbeef)
   )
  )
  (v128.store64_lane offset=4 1
   (local.get $0)
   (v128.const i32x4 0x12345678 0x87654321 0xdeadbeef 0xdeadbeef)
  )
  (i32.add
   (select
    (local.get $0)
    (i32.load
     (local.get $1)
    )
    (i32.const 1)
   )
   (local.get $1)
  )
 )
 (func $1 (type $type$2)
  (memory.init $1
   (i32.const 2048)
   (i32.const 0)
   (i32.const 5)
  )
  (drop
   (call $0
    (i32.const 3)
    (i32.const 5)
   )
  )
 )
 (func $2 (type $type$3) (param $0 anyref) (result i32)
  (call $fimport$0
   (local.get $0)
   (i32.const 0)
   (i32.const 1)
  )
 )
)
(module
 (type $type$0 (func (param anyref i32 i32) (result i32)))
 (type $type$1 (func (param i32 i32) (result i32)))
 (type $type$2 (func))
 (type $type$3 (func (param anyref) (result i32)))
 (import "future-wasi" "write" (func $fimport$0 (type $type$0) (param anyref i32 i32) (result i32)))
 (memory $0 1)
 (data $0 (i32.const 0) "hello")
 (data $1 "world")
 (table $0 1 1 funcref)
 (elem $0 (i32.const 0) $0)
 (export "adder" (func $0))
 (export "memory" (memory $0))
 (export "hello" (func $2))
 (start $1)
 (func $0 (type $type$1) (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  v128.load64_splat offset=4
  drop
  local.get $0
  v128.const i32x4 0x12345678 0x87654321 0xdeadbeef 0xdeadbeef
  v128.load32_lane offset=4 3
  drop
  local.get $0
  v128.const i32x4 0x12345678 0x87654321 0xdeadbeef 0xdeadbeef
  v128.store64_lane offset=4 1
  local.get $0
  local.get $1
  i32.load
  i32.const 1
  select
  local.get $1
  i32.add
 )
 (func $1 (type $type$2)
  i32.const 2048
  i32.const 0
  i32.const 5
  memory.init $1
  i32.const 3
  i32.const 5
  call $0
  drop
 )
 (func $2 (type $type$3) (param $0 anyref) (result i32)
  local.get $0
  i32.const 0
  i32.const 1
  call $fimport$0
 )
)
