(table.get $table
 (i32.const 0)
)
(table.size $table)
(table.grow $table
 (ref.null nofunc)
 (i32.const 0)
)
(module
 (type $0 (struct (field i31ref) (field (ref null $0))))
 (type $1 (array (mut i8)))
 (type $2 (func (param i32 i32) (result i32)))
 (type $3 (func (result (ref $1) (ref $0))))
 (type $4 (func))
 (type $5 (func (param anyref i32 i32) (result i32)))
 (type $6 (func (param anyref) (result i32)))
 (type $7 (func (param anyref) (result anyref anyref)))
 (import "future-wasi" "write" (func $write (type $5) (param anyref i32 i32) (result i32)))
 (global $max_int64 i64 (i64.const 9223372036854775807))
 (global $max_int64_mut (mut i64) (i64.const 9223372036854775807))
 (global $test_float64_bits f64 (f64.const 1.23))
 (memory $0 1)
 (data $hello (i32.const 0) "hello")
 (data $world "world")
 (table $table 1 1 funcref)
 (elem $elem (i32.const 0) $adder)
 (export "adder" (func $adder))
 (export "memory" (memory $0))
 (export "hello" (func $hello))
 (export "gc" (func $gc))
 (start $start)
 (func $adder (type $2) (param $0 i32) (param $1 i32) (result i32)
  (block $add (result i32)
   (if
    (i32.const 0)
    (then
     (unreachable)
    )
   )
   (i32.add
    (select
     (local.get $0)
     (i32.load
      (local.get $1)
     )
     (i32.const 1)
    )
    (local.get $1)
   )
  )
 )
 (func $start (type $4)
  (block $start
   (memory.init $world
    (i32.const 2048)
    (i32.const 0)
    (i32.const 5)
   )
   (drop
    (call_indirect $table (type $2)
     (i32.const 3)
     (i32.const 5)
     (i32.const 0)
    )
   )
  )
 )
 (func $hello (type $6) (param $0 anyref) (result i32)
  (call $write
   (local.get $0)
   (i32.const 0)
   (i32.const 1)
  )
 )
 (func $gc (type $7) (param $0 anyref) (result anyref anyref)
  (local $1 (ref $1))
  (local $2 (ref $0))
  (block $gc_block (type $3) (result (ref $1) (ref $0))
   (local.set $1
    (array.new_fixed $1 2
     (i32.const 0)
     (i32.const 255)
    )
   )
   (array.set $1
    (local.get $1)
    (i32.const 1)
    (i32.const 42)
   )
   (local.set $2
    (struct.new $0
     (ref.cast i31ref
      (local.get $0)
     )
     (struct.new $0
      (ref.i31
       (i32.const 1)
      )
      (struct.new $0
       (ref.i31
        (i32.const 2)
       )
       (struct.new $0
        (ref.i31
         (i32.const 3)
        )
        (ref.null none)
       )
      )
     )
    )
   )
   (tuple.make 2
    (local.get $1)
    (local.get $2)
   )
  )
 )
)
(module
 (type $0 (struct (field i31ref) (field (ref null $0))))
 (type $1 (array (mut i8)))
 (type $2 (func (result (ref $1) (ref $0))))
 (type $3 (func (param i32 i32) (result i32)))
 (type $4 (func))
 (type $5 (func (param anyref i32 i32) (result i32)))
 (type $6 (func (param anyref) (result i32)))
 (type $7 (func (param anyref) (result anyref anyref)))
 (import "future-wasi" "write" (func $write (type $5) (param anyref i32 i32) (result i32)))
 (memory $0 1)
 (data $hello (i32.const 0) "hello")
 (data $world "world")
 (table $table 1 1 funcref)
 (elem $elem (i32.const 0) $adder)
 (export "adder" (func $adder))
 (export "memory" (memory $0))
 (export "hello" (func $hello))
 (export "gc" (func $gc))
 (start $start)
 (func $adder (type $3) (param $0 i32) (param $1 i32) (result i32)
  (i32.add
   (select
    (local.get $0)
    (i32.load
     (local.get $1)
    )
    (i32.const 1)
   )
   (local.get $1)
  )
 )
 (func $start (type $4)
  (memory.init $world
   (i32.const 2048)
   (i32.const 0)
   (i32.const 5)
  )
  (drop
   (call $adder
    (i32.const 3)
    (i32.const 5)
   )
  )
 )
 (func $hello (type $6) (param $0 anyref) (result i32)
  (call $write
   (local.get $0)
   (i32.const 0)
   (i32.const 1)
  )
 )
 (func $gc (type $7) (param $0 anyref) (result anyref anyref)
  (local $1 (ref $1))
  (array.set $1
   (local.tee $1
    (array.new_fixed $1 2
     (i32.const 0)
     (i32.const 255)
    )
   )
   (i32.const 1)
   (i32.const 42)
  )
  (tuple.make 2
   (local.get $1)
   (struct.new $0
    (ref.cast i31ref
     (local.get $0)
    )
    (struct.new $0
     (ref.i31
      (i32.const 1)
     )
     (struct.new $0
      (ref.i31
       (i32.const 2)
      )
      (struct.new $0
       (ref.i31
        (i32.const 3)
       )
       (ref.null none)
      )
     )
    )
   )
  )
 )
)
(module
 (type $type_6 (struct (field i31ref) (field (ref null $type_6))))
 (type $type_5 (array (mut i8)))
 (type $type_7 (func (result anyref anyref)))
 (type $type (func (param anyref i32 i32) (result i32)))
 (type $type_1 (func (param i32 i32) (result i32)))
 (type $type_2 (func))
 (type $type_3 (func (param anyref) (result i32)))
 (type $type_4 (func (param anyref) (result anyref anyref)))
 (import "future-wasi" "write" (func $fimport$0 (type $type) (param anyref i32 i32) (result i32)))
 (memory $0 1)
 (data $0 (i32.const 0) "hello")
 (data $1 "world")
 (table $0 1 1 funcref)
 (elem $0 (i32.const 0) $0)
 (export "adder" (func $0))
 (export "memory" (memory $0))
 (export "hello" (func $2))
 (export "gc" (func $3))
 (start $1)
 (func $0 (type $type_1) (param $0 i32) (param $1 i32) (result i32)
  (i32.add
   (select
    (local.get $0)
    (i32.load
     (local.get $1)
    )
    (i32.const 1)
   )
   (local.get $1)
  )
 )
 (func $1 (type $type_2)
  (memory.init $1
   (i32.const 2048)
   (i32.const 0)
   (i32.const 5)
  )
  (drop
   (call $0
    (i32.const 3)
    (i32.const 5)
   )
  )
 )
 (func $2 (type $type_3) (param $0 anyref) (result i32)
  (call $fimport$0
   (local.get $0)
   (i32.const 0)
   (i32.const 1)
  )
 )
 (func $3 (type $type_4) (param $0 anyref) (result anyref anyref)
  (local $1 (ref $type_5))
  (array.set $type_5
   (local.tee $1
    (array.new_fixed $type_5 2
     (i32.const 0)
     (i32.const 255)
    )
   )
   (i32.const 1)
   (i32.const 42)
  )
  (tuple.make 2
   (local.get $1)
   (struct.new $type_6
    (ref.cast i31ref
     (local.get $0)
    )
    (struct.new $type_6
     (ref.i31
      (i32.const 1)
     )
     (struct.new $type_6
      (ref.i31
       (i32.const 2)
      )
      (struct.new $type_6
       (ref.i31
        (i32.const 3)
       )
       (ref.null none)
      )
     )
    )
   )
  )
 )
)
(module
 (type $type_6 (struct (field i31ref) (field (ref null $type_6))))
 (type $type_5 (array (mut i8)))
 (type $type_7 (func (result anyref anyref)))
 (type $type (func (param anyref i32 i32) (result i32)))
 (type $type_1 (func (param i32 i32) (result i32)))
 (type $type_2 (func))
 (type $type_3 (func (param anyref) (result i32)))
 (type $type_4 (func (param anyref) (result anyref anyref)))
 (import "future-wasi" "write" (func $fimport$0 (type $type) (param anyref i32 i32) (result i32)))
 (memory $0 1)
 (data $0 (i32.const 0) "hello")
 (data $1 "world")
 (table $0 1 1 funcref)
 (elem $0 (i32.const 0) $0)
 (export "adder" (func $0))
 (export "memory" (memory $0))
 (export "hello" (func $2))
 (export "gc" (func $3))
 (start $1)
 (func $0 (type $type_1) (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  local.get $1
  i32.load
  i32.const 1
  select
  local.get $1
  i32.add
 )
 (func $1 (type $type_2)
  i32.const 2048
  i32.const 0
  i32.const 5
  memory.init $1
  i32.const 3
  i32.const 5
  call $0
  drop
 )
 (func $2 (type $type_3) (param $0 anyref) (result i32)
  local.get $0
  i32.const 0
  i32.const 1
  call $fimport$0
 )
 (func $3 (type $type_4) (param $0 anyref) (result anyref anyref)
  (local $1 (ref $type_5))
  i32.const 0
  i32.const 255
  array.new_fixed $type_5 2
  local.tee $1
  i32.const 1
  i32.const 42
  array.set $type_5
  local.get $1
  local.get $0
  ref.cast i31ref
  i32.const 1
  ref.i31
  i32.const 2
  ref.i31
  i32.const 3
  ref.i31
  ref.null none
  struct.new $type_6
  struct.new $type_6
  struct.new $type_6
  struct.new $type_6
  tuple.make 2
 )
)
